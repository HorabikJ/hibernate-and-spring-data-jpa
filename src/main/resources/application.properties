# IMPORTANT: `application.properties` is a root property file. Every `application-XXX`properties` file inherits all 
# properties from `application.properties`. Properties from root `application.properties` can be override in 
# properties files that inherit from root `application.properties`. 
#
#spring.jpa.show-sql=true
#
#Show SQL
spring.jpa.properties.hibernate.show_sql=true
#
#Format SQL
spring.jpa.properties.hibernate.format_sql=true
#
#Show bind values
# Pre Spring Boot 3.0.2
# logging.level.org.hibernate.type.descriptor.sql=trace
# Spring Boot 3.0.2+
logging.level.org.hibernate.type.descriptor.sql=trace
#
# to go to the h2-database console visit localhost:<app-port>/h2-console,
# for credentials look for a lok like below in the logs on tha app startup:
# 2024-05-13T10:51:42.702+02:00  INFO 10020 --- [           main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:2567bf7f-748d-46a3-8b0d-8650c7aacc83'
spring.h2.console.enabled=true
#
# H2 in memory DB has a compatibility mode with all popular RDBMS. To configure this compatibility we have to set 
# correct values in the below property. We want to have this configured as we want our H2 to behave in the same way 
# as the db that we have in prod env. The most important part of below is `MODE=POSTGRESQL`.
# Docs for the h2 url can be found here: https://www.h2database.com/html/features.html
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL;DATABASE_TO_LOWER=TRUE;CASE_INSENSITIVE_IDENTIFIERS=TRUE
spring.datasource.username=sa
spring.datasource.password=password
#
# If the 2 below properties are commented out, Spring will use h2 dialect wen configuring data source.
# We nant to specify the postgresql dialect. Observe this in the logs by searching for: "Using dialect:"
spring.jpa.database=mysql
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#
spring.jpa.hibernate.ddl-auto=create-drop
#
# More on below property here: https://www.baeldung.com/spring-boot-data-sql-and-schema-sql
# search for `spring.jpa.defer-datasource-initialization` in above link.
spring.jpa.defer-datasource-initialization=false
#
# To configure Spring with Liquibase we set the below property that points to liquibase master changelog.
spring.liquibase.change-log=db/changelog/liquibase/00_changelog-master.xml
#
# Locations of Flyway scripts.
spring.flyway.locations=db/changelog/flyway
#
# If the below property is set to `always`, Spring always run the `resources/schema.sql` when the app 
# starts/context initializes. We use it in the MySQLIntegrationTest class which is run with `local` profile as we 
# want to have always a fresh db with fresh data. This was desired behaviour for Hibernate when we did not have 
# liquibase.
# Now, when we have Liquibase, we want this property to be `never` as we do not want Hibernate to manage our db and run 
# this script. We want Liquibase to manage our db. Liquibase will create tables in our db based on the information in
# liquibase changelogs.
spring.sql.init.mode=never
