# This properties are for running the app connected to the postgres db running locally.
# In order to start the Spring App with this setup, the app must be started with profile 'local', for example, with 
# maven flag `-DspringProfilesActive=local`.
# Username and password are derived from `postgres/run-postgres-container.sh` file.
#
# We are telling Spring to use `bookuser` db user for interaction with the db. To see what privileges this user have 
# see the file `src/main/scripts/mysqlusers.sql`.
spring.datasource.username=bookuser
spring.datasource.password=password
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/bookdb?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
#
# If the below property is set to `always`, Spring always run the `resources/schema.sql` when the app 
# starts/context initializes. We use it in the MySQLIntegrationTest class which is run with `local` profile as we 
# want to have always a fresh db with fresh data. This was desired behaviour for Hibernate when we did not have 
# liquibase.
#
# Now, when we have Liquibase, we want this property to be `never` as we do not want Hibernate to manage our db and run 
# this script. We want Liquibase to manage our db. Liquibase will create tables in our db based on the information in
# liquibase changelogs.
spring.sql.init.mode=never
#
# Below property is `validate` as we do not want Hibernate to create tables based on our @Entity classes.
# We want Spring to create db tables by executing `resources/schema.sql` file or Liquibase to do it.
spring.jpa.hibernate.ddl-auto=validate
#
# As Liquibase is responsible for creating our bookdb database, we are telling Spring to use `bookadmin` for Liquibase 
# operations. To see what privileges this user have, please see the file `src/main/scripts/mysqlusers.sql`.
spring.liquibase.user=bookadmin
spring.liquibase.password=password
#
# The same as above.
spring.flyway.user=bookadmin
spring.flyway.password=password
